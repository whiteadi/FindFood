{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../constants\";\nimport { recipes, categories, ingredients } from \"./dataArrays\";\nexport var useCategories = function useCategories() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      categories = _useState2[0],\n      setCategories = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isError = _useState6[0],\n      setIsError = _useState6[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var urlString, url, response, data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsError(false);\n              setIsLoading(true);\n              _context.prev = 2;\n              urlString = API_URL + \"/\" + API_KEY + \"/categories.php\";\n              console.log(1111, urlString);\n              url = new URL(urlString);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                method: \"GET\"\n              }));\n\n            case 8:\n              response = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 11:\n              data = _context.sent;\n              setCategories(data);\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n              setIsError(true);\n\n            case 18:\n              setIsLoading(false);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 15]]);\n    };\n\n    fetchData();\n  }, []);\n  return {\n    categories: categories,\n    isLoading: isLoading,\n    isError: isError\n  };\n};\nexport function getCategoryById(categoryId) {\n  var category;\n  categories.map(function (data) {\n    if (data.id == categoryId) {\n      category = data;\n    }\n  });\n  return category;\n}\nexport function getIngredientName(ingredientID) {\n  var name;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getIngredientUrl(ingredientID) {\n  var url;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\nexport function getCategoryName(categoryId) {\n  var name;\n  categories.map(function (data) {\n    if (data.id == categoryId) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getRecipes(categoryId) {\n  var recipesArray = [];\n  recipes.map(function (data) {\n    if (data.categoryId == categoryId) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\nexport function getRecipesByIngredient(ingredientId) {\n  var recipesArray = [];\n  recipes.map(function (data) {\n    data.ingredients.map(function (index) {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\nexport function getNumberOfRecipes(categoryId) {\n  var count = 0;\n  recipes.map(function (data) {\n    if (data.categoryId == categoryId) {\n      count++;\n    }\n  });\n  return count;\n}\nexport function getAllIngredients(idArray) {\n  var ingredientsArray = [];\n  idArray.map(function (index) {\n    ingredients.map(function (data) {\n      if (data.ingredientId == index[0]) {\n        ingredientsArray.push([data, index[1]]);\n      }\n    });\n  });\n  return ingredientsArray;\n}\nexport function getRecipesByIngredientName(ingredientName) {\n  var nameUpper = ingredientName.toUpperCase();\n  var recipesArray = [];\n  ingredients.map(function (data) {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      var _recipes = getRecipesByIngredient(data.ingredientId);\n\n      var unique = _toConsumableArray(new Set(_recipes));\n\n      unique.map(function (item) {\n        recipesArray.push(item);\n      });\n    }\n  });\n\n  var uniqueArray = _toConsumableArray(new Set(recipesArray));\n\n  return uniqueArray;\n}\nexport function getRecipesByCategoryName(categoryName) {\n  var nameUpper = categoryName.toUpperCase();\n  var recipesArray = [];\n  categories.map(function (data) {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      var _recipes2 = getRecipes(data.id);\n\n      _recipes2.map(function (item) {\n        recipesArray.push(item);\n      });\n    }\n  });\n  return recipesArray;\n}\nexport function getRecipesByRecipeName(recipeName) {\n  var nameUpper = recipeName.toUpperCase();\n  var recipesArray = [];\n  recipes.map(function (data) {\n    if (data.title.toUpperCase().includes(nameUpper)) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}","map":{"version":3,"sources":["C:/development/FindFood/src/data/MockDataAPI.js"],"names":["React","useEffect","useState","useMemo","useCallback","API_URL","API_KEY","recipes","categories","ingredients","useCategories","setCategories","isLoading","setIsLoading","isError","setIsError","fetchData","urlString","console","log","url","URL","fetch","method","response","json","data","getCategoryById","categoryId","category","map","id","getIngredientName","ingredientID","name","ingredientId","getIngredientUrl","photo_url","getCategoryName","getRecipes","recipesArray","push","getRecipesByIngredient","index","getNumberOfRecipes","count","getAllIngredients","idArray","ingredientsArray","getRecipesByIngredientName","ingredientName","nameUpper","toUpperCase","includes","unique","Set","item","uniqueArray","getRecipesByCategoryName","categoryName","getRecipesByRecipeName","recipeName","title"],"mappings":"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","sourcesContent":["import { Text } from \"react-native\";\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../constants\";\nimport { recipes, categories, ingredients } from \"./dataArrays\";\n\nexport const useCategories = () => {\n  const [categories, setCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const urlString = `${API_URL}/${API_KEY}/categories.php`;\n        console.log(1111, urlString);\n        const url = new URL(urlString);\n        let response = await fetch(url, {\n          method: \"GET\",\n        });\n        let data = await response.json();\n        setCategories(data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  return { categories, isLoading, isError };\n};\n\nexport function getCategoryById(categoryId) {\n  let category;\n  categories.map((data) => {\n    if (data.id == categoryId) {\n      category = data;\n    }\n  });\n  return category;\n}\n\nexport function getIngredientName(ingredientID) {\n  let name;\n  ingredients.map((data) => {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\n\nexport function getIngredientUrl(ingredientID) {\n  let url;\n  ingredients.map((data) => {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\n\nexport function getCategoryName(categoryId) {\n  let name;\n  categories.map((data) => {\n    if (data.id == categoryId) {\n      name = data.name;\n    }\n  });\n  return name;\n}\n\nexport function getRecipes(categoryId) {\n  const recipesArray = [];\n  recipes.map((data) => {\n    if (data.categoryId == categoryId) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\n\n// modifica\nexport function getRecipesByIngredient(ingredientId) {\n  const recipesArray = [];\n  recipes.map((data) => {\n    data.ingredients.map((index) => {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\n\nexport function getNumberOfRecipes(categoryId) {\n  let count = 0;\n  recipes.map((data) => {\n    if (data.categoryId == categoryId) {\n      count++;\n    }\n  });\n  return count;\n}\n\nexport function getAllIngredients(idArray) {\n  const ingredientsArray = [];\n  idArray.map((index) => {\n    ingredients.map((data) => {\n      if (data.ingredientId == index[0]) {\n        ingredientsArray.push([data, index[1]]);\n      }\n    });\n  });\n  return ingredientsArray;\n}\n\n// functions for search\nexport function getRecipesByIngredientName(ingredientName) {\n  const nameUpper = ingredientName.toUpperCase();\n  const recipesArray = [];\n  ingredients.map((data) => {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      // data.name.yoUpperCase() == nameUpper\n      const recipes = getRecipesByIngredient(data.ingredientId);\n      const unique = [...new Set(recipes)];\n      unique.map((item) => {\n        recipesArray.push(item);\n      });\n    }\n  });\n  const uniqueArray = [...new Set(recipesArray)];\n  return uniqueArray;\n}\n\nexport function getRecipesByCategoryName(categoryName) {\n  const nameUpper = categoryName.toUpperCase();\n  const recipesArray = [];\n  categories.map((data) => {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      const recipes = getRecipes(data.id); // return a vector of recipes\n      recipes.map((item) => {\n        recipesArray.push(item);\n      });\n    }\n  });\n  return recipesArray;\n}\n\nexport function getRecipesByRecipeName(recipeName) {\n  const nameUpper = recipeName.toUpperCase();\n  const recipesArray = [];\n  recipes.map((data) => {\n    if (data.title.toUpperCase().includes(nameUpper)) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\n"]},"metadata":{},"sourceType":"module"}