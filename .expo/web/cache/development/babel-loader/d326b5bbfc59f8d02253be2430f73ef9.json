{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../constants\";\nimport { recipes, categories, ingredients } from \"./dataArrays\";\nexport var useCategories = function useCategories() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      categories = _useState2[0],\n      setCategories = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isError = _useState6[0],\n      setIsError = _useState6[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var urlString, url, response, data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsError(false);\n              setIsLoading(true);\n              _context.prev = 2;\n              urlString = API_URL + \"/\" + API_KEY + \"/categories.php\";\n              url = new URL(urlString);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                method: \"GET\"\n              }));\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              data = _context.sent;\n              setCategories(data.categories);\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](2);\n              setIsError(true);\n\n            case 17:\n              setIsLoading(false);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 14]]);\n    };\n\n    fetchData();\n  }, []);\n  return {\n    categories: categories,\n    isLoading: isLoading,\n    isError: isError\n  };\n};\nexport var useRecipes = function useRecipes(strCategory) {\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      recipes = _useState8[0],\n      setRecipes = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isLoading = _useState10[0],\n      setIsLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isError = _useState12[0],\n      setIsError = _useState12[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var _urlString, _url, _response, _data;\n\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsError(false);\n              setIsLoading(true);\n              _context2.prev = 2;\n              _urlString = API_URL + \"/\" + API_KEY + \"/filter.php?c=\" + strCategory;\n              _url = new URL(_urlString);\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(fetch(_url, {\n                method: \"GET\"\n              }));\n\n            case 7:\n              _response = _context2.sent;\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(_response.json());\n\n            case 10:\n              _data = _context2.sent;\n              console.log(11111, _data, _urlString);\n              setRecipes(_data.meals);\n              _context2.next = 18;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](2);\n              setIsError(true);\n\n            case 18:\n              setIsLoading(false);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 15]]);\n    };\n\n    fetchData();\n  }, []);\n  return {\n    recipes: recipes,\n    isLoading: isLoading,\n    isError: isError\n  };\n};\nexport function getCategoryById(categoryId) {\n  var category;\n  categories.map(function (data) {\n    if (data.id == categoryId) {\n      category = data;\n    }\n  });\n  return category;\n}\nexport function getIngredientName(ingredientID) {\n  var name;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getIngredientUrl(ingredientID) {\n  var url;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\nexport function getCategoryName(categoryId) {\n  var name;\n  categories.map(function (data) {\n    if (data.id == categoryId) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getRecipes(categoryId) {\n  var recipesArray = [];\n  recipes.map(function (data) {\n    if (data.categoryId == categoryId) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\nexport function getRecipesByIngredient(ingredientId) {\n  var recipesArray = [];\n  recipes.map(function (data) {\n    data.ingredients.map(function (index) {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\nexport function getNumberOfRecipes(categoryId) {\n  var count = 0;\n  recipes.map(function (data) {\n    if (data.categoryId == categoryId) {\n      count++;\n    }\n  });\n  return count;\n}\nexport function getAllIngredients(idArray) {\n  var ingredientsArray = [];\n  idArray.map(function (index) {\n    ingredients.map(function (data) {\n      if (data.ingredientId == index[0]) {\n        ingredientsArray.push([data, index[1]]);\n      }\n    });\n  });\n  return ingredientsArray;\n}\nexport function getRecipesByIngredientName(ingredientName) {\n  var nameUpper = ingredientName.toUpperCase();\n  var recipesArray = [];\n  ingredients.map(function (data) {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      var _recipes = getRecipesByIngredient(data.ingredientId);\n\n      var unique = _toConsumableArray(new Set(_recipes));\n\n      unique.map(function (item) {\n        recipesArray.push(item);\n      });\n    }\n  });\n\n  var uniqueArray = _toConsumableArray(new Set(recipesArray));\n\n  return uniqueArray;\n}\nexport function getRecipesByCategoryName(categoryName) {\n  var nameUpper = categoryName.toUpperCase();\n  var recipesArray = [];\n  categories.map(function (data) {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      var _recipes2 = getRecipes(data.id);\n\n      _recipes2.map(function (item) {\n        recipesArray.push(item);\n      });\n    }\n  });\n  return recipesArray;\n}\nexport function getRecipesByRecipeName(recipeName) {\n  var nameUpper = recipeName.toUpperCase();\n  var recipesArray = [];\n  recipes.map(function (data) {\n    if (data.title.toUpperCase().includes(nameUpper)) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}","map":{"version":3,"sources":["C:/development/FindFood/src/data/MockDataAPI.js"],"names":["React","useEffect","useState","useMemo","useCallback","API_URL","API_KEY","recipes","categories","ingredients","useCategories","setCategories","isLoading","setIsLoading","isError","setIsError","fetchData","urlString","url","URL","fetch","method","response","json","data","useRecipes","strCategory","setRecipes","console","log","meals","getCategoryById","categoryId","category","map","id","getIngredientName","ingredientID","name","ingredientId","getIngredientUrl","photo_url","getCategoryName","getRecipes","recipesArray","push","getRecipesByIngredient","index","getNumberOfRecipes","count","getAllIngredients","idArray","ingredientsArray","getRecipesByIngredientName","ingredientName","nameUpper","toUpperCase","includes","unique","Set","item","uniqueArray","getRecipesByCategoryName","categoryName","getRecipesByRecipeName","recipeName","title"],"mappings":"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","sourcesContent":["import { Text } from \"react-native\";\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../constants\";\nimport { recipes, categories, ingredients } from \"./dataArrays\";\n\nexport const useCategories = () => {\n  const [categories, setCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const urlString = `${API_URL}/${API_KEY}/categories.php`;\n        const url = new URL(urlString);\n        let response = await fetch(url, {\n          method: \"GET\",\n        });\n        let data = await response.json();\n        setCategories(data.categories);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  return { categories, isLoading, isError };\n};\n\nexport const useRecipes = (strCategory) => {\n  const [recipes, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const urlString = `${API_URL}/${API_KEY}/filter.php?c=${strCategory}`;        \n        const url = new URL(urlString);\n        let response = await fetch(url, {\n          method: \"GET\",\n        });\n        let data = await response.json();\n        console.log(11111, data, urlString);\n        setRecipes(data.meals);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  return { recipes, isLoading, isError };\n};\n\nexport function getCategoryById(categoryId) {\n  let category;\n  categories.map((data) => {\n    if (data.id == categoryId) {\n      category = data;\n    }\n  });\n  return category;\n}\n\nexport function getIngredientName(ingredientID) {\n  let name;\n  ingredients.map((data) => {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\n\nexport function getIngredientUrl(ingredientID) {\n  let url;\n  ingredients.map((data) => {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\n\nexport function getCategoryName(categoryId) {\n  let name;\n  categories.map((data) => {\n    if (data.id == categoryId) {\n      name = data.name;\n    }\n  });\n  return name;\n}\n\nexport function getRecipes(categoryId) {\n  const recipesArray = [];\n  recipes.map((data) => {\n    if (data.categoryId == categoryId) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\n\n// modifica\nexport function getRecipesByIngredient(ingredientId) {\n  const recipesArray = [];\n  recipes.map((data) => {\n    data.ingredients.map((index) => {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\n\nexport function getNumberOfRecipes(categoryId) {\n  let count = 0;\n  recipes.map((data) => {\n    if (data.categoryId == categoryId) {\n      count++;\n    }\n  });\n  return count;\n}\n\nexport function getAllIngredients(idArray) {\n  const ingredientsArray = [];\n  idArray.map((index) => {\n    ingredients.map((data) => {\n      if (data.ingredientId == index[0]) {\n        ingredientsArray.push([data, index[1]]);\n      }\n    });\n  });\n  return ingredientsArray;\n}\n\n// functions for search\nexport function getRecipesByIngredientName(ingredientName) {\n  const nameUpper = ingredientName.toUpperCase();\n  const recipesArray = [];\n  ingredients.map((data) => {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      // data.name.yoUpperCase() == nameUpper\n      const recipes = getRecipesByIngredient(data.ingredientId);\n      const unique = [...new Set(recipes)];\n      unique.map((item) => {\n        recipesArray.push(item);\n      });\n    }\n  });\n  const uniqueArray = [...new Set(recipesArray)];\n  return uniqueArray;\n}\n\nexport function getRecipesByCategoryName(categoryName) {\n  const nameUpper = categoryName.toUpperCase();\n  const recipesArray = [];\n  categories.map((data) => {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      const recipes = getRecipes(data.id); // return a vector of recipes\n      recipes.map((item) => {\n        recipesArray.push(item);\n      });\n    }\n  });\n  return recipesArray;\n}\n\nexport function getRecipesByRecipeName(recipeName) {\n  const nameUpper = recipeName.toUpperCase();\n  const recipesArray = [];\n  recipes.map((data) => {\n    if (data.title.toUpperCase().includes(nameUpper)) {\n      recipesArray.push(data);\n    }\n  });\n  return recipesArray;\n}\n"]},"metadata":{},"sourceType":"module"}